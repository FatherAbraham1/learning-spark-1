package com.packt.spark.section3

import com.packt.spark._
import org.apache.spark._
import org.apache.spark.rdd._
import geotrellis.vector._
import com.github.nscala_time.time.Imports._

import org.apache.hadoop.mapreduce.Job
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat
import org.apache.hadoop.mapreduce.lib.input.{FileInputFormat, SequenceFileInputFormat}
import org.apache.hadoop.io.{Writable, WritableComparable}
import java.io._

class NeighborhoodDataWritable() extends Writable {
  private var _value: NeighborhoodData = null

  def set(value: NeighborhoodData): Unit = _value = value
  def get(): NeighborhoodData = _value

  def readFields(in: DataInput): Unit = {
    val name = in.readUTF()
    val area = in.readDouble()
    _value = NeighborhoodData(name, area)
  }

  def write(out: DataOutput): Unit = {
    out.writeUTF(_value.name)
    out.writeDouble(_value.area)
  }
}

object NeighborhoodDataWritable {
  def apply(neighborhoodData: NeighborhoodData): NeighborhoodDataWritable = {
    val writable = new NeighborhoodDataWritable()
    writable.set(neighborhoodData)
    writable
  }
}

object HadoopAPI extends ExampleApp {
  def run() =
    withSparkContext { implicit sc =>
      val neighborhoods = Neighborhoods.fromJson("data/Neighborhoods_Philadelphia.geojson")
      val bcNeighborhoods = sc.broadcast(neighborhoods)      

      val neighborhoodsToViolations: RDD[(NeighborhoodData, Violation)] =
        fullDataset
          .mapPartitions { rows =>
            val parse = Violation.rowParser
            rows.flatMap { row => parse(row) }
          }
          .filter(_.ticket.fine > 5.0)
          .flatMap { violation =>
            val nb = bcNeighborhoods.value
            nb.find { case Feature(polygon, _) =>
              polygon.contains(violation.location)
            }.map { case Feature(_, neighborhood) =>
              (neighborhood, violation)
            }
          }
    }
}
